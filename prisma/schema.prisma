// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

//! USER
enum Role {
  admin
  user
}

model User {
  id                     String   @id @default(cuid())
  email                  String   @unique
  password               String
  restaurantName         String?
  phone                  String?
  address                String?
  city                   String?
  postalCode             String?
  hours                  String? 
  role                   Role     @default(admin)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  reservation            Reservation[] 
  client                 Client[]

  table                  Table[]
  timeSlot               TimeSlot[]

  menuCategory           MenuCategory[]
  menuItem               MenuItem[]

  article                Article[]
  event                  Event[]

  Banner                 Banner[]
}

model VerificationToken {
  id              String   @id @default(cuid())
  email           String
  token           String   @unique
  expires         DateTime

  @@unique([email, token], name: "email_token")
}

model PasswordResetToken {
  id              String   @id @default(cuid())
  email           String
  token           String   @unique
  expires         DateTime

  @@unique([email, token], name: "email_token")
}

//! RESERVATION
enum ReservationStatus {
  Attente
  Confirm√©e
  Annul√©e
}

// Demande de r√©servation : le restaurateur peut choisir de l'accepter ou de la refuser
// S'il confirme la r√©servation, il doit choisir une ou plusieurs tables qui seront r√©serv√©es √† partir de l'heure d'arriv√©e
// Le restaurateur peut lui aussi cr√©er une reservation pour un client et choisir une ou plusieurs tables
// Le client peut annuler sa r√©servation
// Le restaurateur peut annuler la r√©servation du client

model Reservation {
  id              String             @id @default(cuid())
  date            DateTime           // Date de la r√©servation (ex: 2025-05-10)
  arrivalTime     DateTime           // Heure d‚Äôarriv√©e (ex: 12h30)
  guests          Int         // nombre de couverts
  status          ReservationStatus  @default(Attente)

  isPrivate       Boolean            @default(false) // üëà privatisation ou non
  privateFrom     DateTime?          // Heure de d√©but de privatisation
  privateTo       DateTime?          // Heure de fin de privatisation

  // Relation avec User (nouvelle relation)
  user            User               @relation(fields: [userId], references: [id])
  userId          String             // ID du salon propri√©taire du rendez-vous

  clientId        String?            // ID du client (facultatif)
  client          Client?            @relation(fields: [clientId], references: [id])

  tables          ReservationOnTable[]

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Table {
  id                String           @id @default(cuid())
  name              String           // Ex: "T1", "Terrasse 3"
  capacity          Int              // Nombre de couverts max
  userId            String
  user              User             @relation(fields: [userId], references: [id])

  reservations      ReservationOnTable[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ReservationOnTable {
  reservation       Reservation @relation(fields: [reservationId], references: [id])
  reservationId     String

  table             Table       @relation(fields: [tableId], references: [id])
  tableId           String

  assignedAt        DateTime    @default(now())

  @@id([reservationId, tableId])
}

model TimeSlot {
  id            String       @id @default(cuid())
  date          DateTime     // Date du cr√©neau
  startTime     DateTime     // Heure de d√©but du cr√©neau
  endTime       DateTime     // Heure de fin du cr√©neau
  isAvailable   Boolean      @default(true)
  
  userId        String
  user          User         @relation(fields: [userId], references: [id])

  // reservation   Reservation? @relation(fields: [reservationId], references: [id])
  // reservationId String?      // Li√© si ce cr√©neau a √©t√© r√©serv√©

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

//! CLIENT & FICHE CLIENT
model Client {
  id                  String   @id @default(cuid())
  userId              String   // Salon propri√©taire de la fiche client
  user                User     @relation(fields: [userId], references: [id])
  
  firstName           String
  lastName            String
  email               String   @unique
  phone               String

  // Lien vers les RDV (facultatif)
  reservation         Reservation[]   // Un client peut avoir plusieurs RDV

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

//! MENU CATEGORIES
enum MenuCategoryType {
  Saisonnier
  Suggestion
  Signature
}

model MenuCategory {
  id        String           @id @default(cuid())
  name      String
  type      MenuCategoryType
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  items     MenuItem[]

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model MenuItem {
  id             String         @id @default(cuid())
  title          String
  description    String?
  price          Float
  image          String?        // URL vers une image (facultatif)
  ingredients    String?        //  champ libre pour lister les ingr√©dients

  available      Boolean        @default(true) //  Dispo ou masqu√©

  userId         String
  user           User           @relation(fields: [userId], references: [id])

  categoryId     String
  category       MenuCategory   @relation(fields: [categoryId], references: [id])

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

//! ACTUALITES
// restaurant peut publier ses propres articles (actualit√©s, √©v√©nements, promos‚Ä¶)
model Article {
  id          String    @id @default(cuid())
  title       String
  content     String     // texte long, format markdown ou HTML possible
  image       String?    // URL de l‚Äôimage (optionnelle)
  publishedAt DateTime   @default(now())
  
  userId      String
  user        User       @relation(fields: [userId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

//! EVENTS
// Le restaurateur pourra cr√©er des √©v√©nements depuis son admin
model Event {
  id          String    @id @default(cuid())
  title       String
  description String     // description de l‚Äô√©v√©nement
  date        DateTime   // date √† laquelle a lieu l'√©v√©nement
  image       String?    // URL image (optionnelle)
  banner      String?    // Phrase promotionnelle (optionnelle)

  userId      String
  user        User       @relation(fields: [userId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

//! BANNIERE DE PROMOTION
// Permettre au restaurateur de cr√©er une banni√®re personnalis√©e
model Banner {
  id          String    @id @default(cuid())
  title       String    // Texte affich√© sur la banni√®re (ex: "Happy Hours !")
  image       String?   // Image d‚Äôarri√®re-plan (optionnelle)
  link        String?   // URL de redirection (vers un event, menu, etc.)
  
  startsAt    DateTime  // D√©but d‚Äôaffichage
  endsAt      DateTime  // Fin d‚Äôaffichage
  
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}